//
// UFPE_CfsWinCustom.RC : XOP-specific resources for CED1401 on Windows

//	This file is compiled by the resource compiler and creates 
//   XOP-specific	resources that IGOR looks for in an XOP module.

// Defines XOP-specific symbols.
#include "C:\Program files\wavemetrics\IGORXOPS\XOPSUPPORT\XOPResources.h"	
#include "C:\Program files\wavemetrics\IGORXOPS\XOPSUPPORT\IgorXOP.h"	  // NT_I16

// Custom error messages
// those above 100 are copied from USE1401.h. The original numbers ranging from..
// -500  to  -611 are converted to a range suitable for IGOR ( see XOPEntry() in XopMain.c )
//   same order as the list of #defines in UFPE_CfsError.H
1100 STR#				
BEGIN    
   //   1 
	"UFPE_Cfs-XOP requires Igor 2.0 or later. \0",	  
	"UFPE_Cfs-XOP was called to execute an unknown function.\0",
	"Input string is non-existent. \0",
	"Wave does not exist \0",
	"Coefficient wave must be single or double precision floating point \0",
	"m must be ² l; m and l must be within -1 to 1 \0",
	"The logfit XFUNC requires a math coprocessor \0",
	"The plgndr XFUNC requires a math coprocessor \0",
	"Input number must not be negative \0",
	"Is not 2 byte integer wave \0",
	"Is not 4 byte float wave \0",
	"Is not text wave \0",
	"Waves have different lengths \0",
	"Out of memory.....           \0",
	"Is neither 2 byte integer wave nor 4 byte float wave \0",

   //  16 
															"?\0", "?\0", "?\0", "?\0",
   "?\0", "?\0", "?\0", "?\0", "?\0", "?\0", "?\0", "?\0", "?\0", "?\0",
   "?\0", "?\0", "?\0", "?\0", "?\0", "?\0", "?\0", "?\0", "?\0", "?\0",
   "?\0", "?\0", "?\0", "?\0", "?\0", "?\0", "?\0", "?\0", "?\0", "?\0",
   "?\0", "?\0", "?\0", "?\0", "?\0", "?\0", "?\0", "?\0", "?\0", "?\0",
   "?\0", "?\0", "?\0", "?\0", "?\0", "?\0", "?\0", "?\0", "?\0", "?\0",
   "?\0", "?\0", "?\0", "?\0", "?\0", "?\0", "?\0", "?\0", "?\0", "?\0",
   "?\0", "?\0", "?\0", "?\0", "?\0", "?\0", "?\0", "?\0", "?\0", "?\0",
   "?\0", "?\0", "?\0", "?\0", "?\0", "?\0", "?\0", "?\0", "?\0", "?\0",
   // 100  Start of CED errors
   "1401 is there but switched off (-500) \0",
   "1401 is not connected  (-501) \0",
   "If 1401 is present, it is ill (-502) \0",
   "Interface card is missing  (-503) \0",
   "1401 failed to come ready  (-504) \0",
   "Interface has bad switches (-505) \0",
   "1401+ did not come ready (-506) \0",
   "Could not grab the interrupt vector (-507) \0",
   "1401 is already in use (-508) \0",
   "Could not get DMA channel (-509) \0",
   //  110  
   "The handle provided was bad (-510) \0",
   "The 1401 number provided was bad (-511) \0",
   "unused 112 \0",
   "unused 113 \0",
   "unused 114 \0",
   "unused 115 \0",
   "unused 116 \0",
   "unused 117 \0",
   "unused 118 \0",
   "unused 119 \0",
   // 120 
   "No such function (-520) \0",
   "No such sub function (-521) \0",
   "No room in output buffer (-522) \0",
   "No input in buffer (-523) \0",
   "String is longer than buffer (-524) \0",
   "Failed to lock memory (-525) \0",
   "Failed to unlock memory (-526) \0",
   "Area is already set up (-527) \0",
   "Area is not set up (-528) \0",
   "Illegal area number (-529) \0",
   // 130 
   "?\0", "?\0", "?\0", "?\0", "?\0", "?\0", "?\0", "?\0", "?\0", "?\0",
   // 140 
   "Command file not found (-540) \0",
   "Error readind command file (-541) \0",
   "Unknown command (-542) \0",
   "Not enough host space to load (-543) \0",
   "Could not lock resource or command (-544) \0",
   "CLOAD command failed (-545) \0",
   "?\0", "?\0", "?\0", "?\0",
   // 150 
   "?\0", "?\0", "?\0", "?\0", "?\0", "?\0", "?\0", "?\0", "?\0", "?\0",
   // 160 
   "tohost/1401 failed  (-560 ) \0",
   "?\0", "?\0", "?\0", "?\0", "?\0", "?\0", "?\0", "?\0", "?\0",
   // 170 
   "?\0", "?\0", "?\0", "?\0", "?\0", "?\0", "?\0", "?\0", "?\0", "?\0",
   // 180 
   "Not 386 enhanced mode  (-580) \0",
   "No device driver  (-581) \0",
   "Device driver is too old  (-582) \0",
   "?\0", "?\0", "?\0", "?\0", "?\0", "?\0", "?\0",
   // 190 
   "Timeout occurred  (-590) \0",
   "?\0", "?\0", "?\0", "?\0", "?\0", "?\0", "?\0", "?\0", "?\0",
   // 200 
   "The buffer for GetString is too small (-600) \0",
   "There is already a callback  (-601) \0",
   "Bad parameter to dereg callback (-602) \0",
   "?\0", "?\0", "?\0", "?\0", "?\0", "?\0", "?\0",
   // 210 
   "Failed talking to driver (-610) \0",
   "Needed  memory and could not get it (-611) \0",
   // End of CED errors

	0,								// end of string resource.
END


// no menu item 


// XOPI - Describes general XOP properties to IGOR. 
1100 XOPI					  
BEGIN
	XOP_VERSION,			  // Version number of host XOP system.
	DEV_SYS_CODE,			  // Code for development system used to make XOP
	0,							  // True if XOP requires hierarchical menus
	1,							  // True if XOP requires math coprocessor
	0							  // True if XOP requires MMU
END


// Describes OPERATIONS that the XOP adds to IGOR
// SAME ORDER IN 'sfunc[]'  AND HERE IN UFPE_CfsWinCustom.RC

1100 XOPF	
BEGIN

	"UFPE_CfsCreateFile\0",				// Function name    
	 F_UTIL | F_EXTERNAL,		  	// Function category,
       NT_FP64,					  	// Return hnd        short
		   HSTRING_TYPE,				// 1.par: FName      string handle
		   HSTRING_TYPE,				// 2.par: Comment    string handle
		   NT_FP64,					   // 3.par: BlockSize  WORD
		   NT_FP64,						// 4.par: Channels   short
		   NT_FP64,					   // 5.par: maxDSVar     int
		   NT_FP64,					   // 6.par: maxFileVar   int
         NT_FP64,					   // 7.par: ErrMode	int
		   0,								// end of parameters

	"UFPE_CfsOpenFile\0",					// Function name    
     F_UTIL | F_EXTERNAL,		  	// Function category,
       NT_FP64,					  	// Return hnd         short
		   HSTRING_TYPE,				// 1.par: FName       string handle
		   NT_FP64,						// 2.par: enableWrite short
		   NT_FP64,						// 3.par: memoryTable short
		   NT_FP64,						// 4.par: ErrMode     int
		   0,								// end of parameters

	"UFPE_CfsCloseFile\0",				// Function name    
	 F_UTIL | F_EXTERNAL,		  	// Function category,
       NT_FP64,						// Return value type.
	      NT_FP64,						// 1.par: hnd         short
	      NT_FP64,						// 2.par: ErrMode	int
		   0,								// end of parameters

    "UFPE_CfsCommitFile\0",				// Function name    
	 F_UTIL | F_EXTERNAL,		  	// Function category,
       NT_FP64,						// Return value type.
	      NT_FP64,						// 1.par: hnd         short
	      NT_FP64,						// 2.par: ErrMode	int
		   0,								// end of parameters

    "UFPE_CfsGetGenInfo\0",				// Function name    
	 F_UTIL | F_EXTERNAL,		  	// Function category,
        HSTRING_TYPE,				// Returns string 'time, CFSSEP, date, CFSSEP, comment
	      NT_FP64,						// 1.par: hnd         short
          NT_FP64,				   // 2.par: ErrMode	int
		   0,								// end of parameters

    "UFPE_CfsGetFileInfo\0",			// Function name    
	 F_UTIL | F_EXTERNAL,		  	// Function category,
        HSTRING_TYPE,				// Returns string 'channels, CFSSEP, fileVars, CFSSEP, DSVars, CFSSEP, dataSections'
		   NT_FP64,						// 1.par: hnd         short
           NT_FP64,				   // 2.par: ErrMode	int
		   0,								// end of parameters

	"UFPE_CfsGetFileChan\0",				// Function name    
	 F_UTIL | F_EXTERNAL,		  	// Function category,
        HSTRING_TYPE,				// Returns string 'ChannelName, CFSSEP, yUnits, CFSSEP, xUnits, CFSSEP, DataType, CFSSEP, DataKind, CFSSEP, Spacing, CFSSEP, Other'
		   NT_FP64,						// 1.par: hnd         short
		   NT_FP64,						// 2.par: channel     short
           NT_FP64,				   // 3.par: ErrMode	int
		   0,								// end of parameters

	"UFPE_CfsSetFileChan\0",				// Function name    
	 F_UTIL | F_EXTERNAL,		  	// Function category,
        NT_FP64,					 	// Return value type.
		   NT_FP64,					   // 1.par: hnd         short
		   NT_FP64,					   // 2.par: Channel     short
		   HSTRING_TYPE,			   // 3.par: ChannelName string handle
		   HSTRING_TYPE,				// 4.par: yUnits      string handle
		   HSTRING_TYPE,			   // 5.par: xUnits      string handle
		   NT_FP64,					   // 6.par: DataType    char/Byte
		   NT_FP64,					   // 7.par: DataKind    char/Byte
		   NT_FP64,						// 8.par: Spacing     short
		   NT_FP64,					   // 9.par: Other       short
	   NT_FP64,						   // 10.par: ErrMode	int
		   0,							   // end of parameters

	"UFPE_CfsSetDSChan\0",		      // Function name    
	 F_UTIL | F_EXTERNAL,		  	// Function category,
       NT_FP64,					  	// Return value type.
		   NT_FP64,					   // 1.par: hnd         short
		   NT_FP64,					   // 2.par: Channel     short
		   NT_FP64,					   // 3.par: DataSection WORD
		   NT_FP64,					   // 4.par: StartOffset long
		   NT_FP64,					   // 5.par: Points      long
		   NT_FP64,						// 6.par: yScale      float    
		   NT_FP64,					   // 7.par: yOffset     float
		   NT_FP64,					   // 8.par: xScale      float
		   NT_FP64,					   // 9.par: xOffset     float
	   NT_FP64,						   // 10.par: ErrMode	int
		   0,							   // end of parameters

	"UFPE_CfsGetDSChan\0",				// Function name    
	 F_UTIL | F_EXTERNAL,		  	// Function category,
       HSTRING_TYPE,				  	// Returns string 'StartOffset, Points, yScale, yOffset, xScale, xOffset'
		   NT_FP64,					   // 1.par: hnd         short
		   NT_FP64,					   // 2.par: Channel     short
		   NT_FP64,					   // 3.par: DataSection WORD
	   NT_FP64,						   // 4.par: ErrMode	int
		   0,							   // end of parameters

	"UFPE_CfsGetChanData\0",          // Function name    
	 F_UTIL | F_EXTERNAL,		  	// Function category,
       NT_FP64,					  	// Return value type.
		   NT_FP64,					   // 1.par: hnd         short
		   NT_FP64,					   // 2.par: Channel     short
		   NT_FP64,					   // 3.par: DataSection WORD
		   NT_FP64,					   // 4.par: FirstElementlong
		   NT_FP64,						// 5.par: NumElements long
           NT_I16 | WAVE_TYPE,	// 6.par: wDataADS    short integer wave 
		   NT_FP64,					   // 7.par: AreaSize    long
	   NT_FP64,						   // 8.par: ErrMode	int
		   0,								// end of parameters

	"UFPE_CfsInsertDS\0",					// Function name    
	 F_UTIL | F_EXTERNAL,		  	// Function category,
       NT_FP64,					  	// Return value type.
		   NT_FP64,					   // 1.par: hnd         short
		   NT_FP64,					   // 2.par: DataSection WORD
		   NT_FP64,					   // 3.par: FlagSet     WORD
	   NT_FP64,						   // 4.par: ErrMode	int
		   0,							   // end of parameters

   "UFPE_CfsWriteData\0",				// Function name    
	F_UTIL | F_EXTERNAL,			  	// Function category,
      NT_FP64,						  	// Return value type.
		   NT_FP64,					   // 1.par: hnd         short
		   NT_FP64,					   // 2.par: DataSection WORD
		   NT_FP64,					   // 3.par: StartOffset long
		   NT_FP64,						// 4.par: Bytes       WORD
         NT_I16 | WAVE_TYPE,		// 5.par: wDataADS    short integer wave 
	   NT_FP64,							// 6.par: ErrMode	int
		   0,								// end of parameters

   "UFPE_CfsReadData\0",					// Function name    
	F_UTIL | F_EXTERNAL,			   // Function category,
      NT_FP64,						   // Return value type.
		   NT_FP64,					   // 1.par: hnd         short
		   NT_FP64,					   // 2.par: DataSection WORD
		   NT_FP64,					   // 3.par: StartOffset long
		   NT_FP64,					   // 4.par: Bytes       WORD
           NT_I16 | WAVE_TYPE,   // 5.par: wDataADS    short integer wave 
	       NT_FP64,				   // 6.par: ErrMode	int
		   0,							   // end of parameters

	"UFPE_CfsSetVarVal\0",				// Function name    
	 F_UTIL | F_EXTERNAL,	  		// Function category,
       NT_FP64,					  	// Return value type.
		   NT_FP64,					   // 1.par: hnd         short
		   NT_FP64,					   // 2.par: VarNo       short
		   NT_FP64,					   // 3.par: VarKind     short
		   NT_FP64,					   // 4.par: DataSection WORD
		   HSTRING_TYPE,				// 5.par: VarAsString string handle
	   NT_FP64,							// 6.par: ErrMode	int
		   0,								// end of parameters

	"UFPE_CfsGetVarVal\0",				// Function name    
	 F_UTIL | F_EXTERNAL,		  	// Function category,
       HSTRING_TYPE,		     	  	// Returns the number as a string
		   NT_FP64,					   // 1.par: hnd         short
		   NT_FP64,					   // 2.par: VarNo       short
		   NT_FP64,					   // 3.par: VarKind     short
		   NT_FP64,						// 4.par: DataSection WORD
	   NT_FP64,						   // 10.par: ErrMode	int
		   0,							   // end of parameters

	"UFPE_CfsGetVarType\0",	         // Function name    
	 F_UTIL | F_EXTERNAL,		  	// Function category,
       NT_FP64,	          	  	// Return value type.
		   NT_FP64,					   // 1.par: hnd         short
		   NT_FP64,					   // 2.par: VarNo       short
		   NT_FP64,					   // 3.par: VarKind     short
	   NT_FP64,						   // 10.par: ErrMode	int
		   0,								// end of parameters

	"UFPE_CfsGetVarDesc\0",				// Function name    
	 F_UTIL | F_EXTERNAL,	      // Function category,
       HSTRING_TYPE,		     	   // Returns string 'VarSize, CFSSEP, VarType, CFSSEP, Units, CFSSEP, Description'
		   NT_FP64,					   // 1.par: hnd         short
		   NT_FP64,					   // 2.par: VarNo       short
		   NT_FP64,					   // 3.par: VarKind     short
	   NT_FP64,						   // 10.par: ErrMode	int
		   0,							   // end of parameters

	"UFPE_CfsSetDescriptor\0",			// Function name    
	 F_UTIL | F_EXTERNAL,		  	// Function category,
       NT_FP64,					  	// Return value type.
		   NT_FP64,					   // 1.par: nType: DSVAR or FILEARRAY
		   NT_FP64,					   // 2.par: nChan
		   HSTRING_TYPE,				// 3.par: variable list (string handle).
		   0,								// end of parameters

	// More function descriptions can appear here.
	
	0,										// end  of function resource.
END

